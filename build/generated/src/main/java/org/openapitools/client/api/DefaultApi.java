/*
 * Formel 1 API
 * A small sample API to grasp the basics of the OpenAPI Specification
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DriverDto;
import org.openapitools.client.model.PonyDto;
import org.openapitools.client.model.RacingTeamDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addPony
     * @param ponyDto  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added the pony </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPonyCall(PonyDto ponyDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = ponyDto;

        // create path and map variables
        String localVarPath = "/ponies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPonyValidateBeforeCall(PonyDto ponyDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ponyDto' is set
        if (ponyDto == null) {
            throw new ApiException("Missing the required parameter 'ponyDto' when calling addPony(Async)");
        }
        

        okhttp3.Call localVarCall = addPonyCall(ponyDto, _callback);
        return localVarCall;

    }

    /**
     * introduce a new pony to the flock
     * 
     * @param ponyDto  (required)
     * @return PonyDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added the pony </td><td>  -  </td></tr>
     </table>
     */
    public PonyDto addPony(PonyDto ponyDto) throws ApiException {
        ApiResponse<PonyDto> localVarResp = addPonyWithHttpInfo(ponyDto);
        return localVarResp.getData();
    }

    /**
     * introduce a new pony to the flock
     * 
     * @param ponyDto  (required)
     * @return ApiResponse&lt;PonyDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added the pony </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PonyDto> addPonyWithHttpInfo(PonyDto ponyDto) throws ApiException {
        okhttp3.Call localVarCall = addPonyValidateBeforeCall(ponyDto, null);
        Type localVarReturnType = new TypeToken<PonyDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * introduce a new pony to the flock (asynchronously)
     * 
     * @param ponyDto  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added the pony </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPonyAsync(PonyDto ponyDto, final ApiCallback<PonyDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPonyValidateBeforeCall(ponyDto, _callback);
        Type localVarReturnType = new TypeToken<PonyDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for driverGet
     * @param limit How many items to return at one time (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of drivers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driverGetCall(Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/driver";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call driverGetValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = driverGetCall(limit, _callback);
        return localVarCall;

    }

    /**
     * List all drivers (funktioniert noch nicht)
     * 
     * @param limit How many items to return at one time (optional)
     * @return List&lt;DriverDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of drivers </td><td>  -  </td></tr>
     </table>
     */
    public List<DriverDto> driverGet(Integer limit) throws ApiException {
        ApiResponse<List<DriverDto>> localVarResp = driverGetWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * List all drivers (funktioniert noch nicht)
     * 
     * @param limit How many items to return at one time (optional)
     * @return ApiResponse&lt;List&lt;DriverDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of drivers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DriverDto>> driverGetWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = driverGetValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<DriverDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all drivers (funktioniert noch nicht) (asynchronously)
     * 
     * @param limit How many items to return at one time (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of drivers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call driverGetAsync(Integer limit, final ApiCallback<List<DriverDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = driverGetValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<DriverDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPonies
     * @param limit How many items to return at one time (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of pets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPoniesCall(Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ponies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPoniesValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getPoniesCall(limit, _callback);
        return localVarCall;

    }

    /**
     * List all ponies
     * 
     * @param limit How many items to return at one time (optional)
     * @return List&lt;PonyDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of pets </td><td>  -  </td></tr>
     </table>
     */
    public List<PonyDto> getPonies(Integer limit) throws ApiException {
        ApiResponse<List<PonyDto>> localVarResp = getPoniesWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * List all ponies
     * 
     * @param limit How many items to return at one time (optional)
     * @return ApiResponse&lt;List&lt;PonyDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of pets </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PonyDto>> getPoniesWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getPoniesValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<PonyDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all ponies (asynchronously)
     * 
     * @param limit How many items to return at one time (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of pets </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPoniesAsync(Integer limit, final ApiCallback<List<PonyDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPoniesValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<PonyDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for racingteamGet
     * @param limit How many items to return at one time (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of Racing Teams </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racingteamGetCall(Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/racingteam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call racingteamGetValidateBeforeCall(Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = racingteamGetCall(limit, _callback);
        return localVarCall;

    }

    /**
     * List all Racing Teams (funktioniert noch nicht)
     * 
     * @param limit How many items to return at one time (optional)
     * @return List&lt;RacingTeamDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of Racing Teams </td><td>  -  </td></tr>
     </table>
     */
    public List<RacingTeamDto> racingteamGet(Integer limit) throws ApiException {
        ApiResponse<List<RacingTeamDto>> localVarResp = racingteamGetWithHttpInfo(limit);
        return localVarResp.getData();
    }

    /**
     * List all Racing Teams (funktioniert noch nicht)
     * 
     * @param limit How many items to return at one time (optional)
     * @return ApiResponse&lt;List&lt;RacingTeamDto&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of Racing Teams </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RacingTeamDto>> racingteamGetWithHttpInfo(Integer limit) throws ApiException {
        okhttp3.Call localVarCall = racingteamGetValidateBeforeCall(limit, null);
        Type localVarReturnType = new TypeToken<List<RacingTeamDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all Racing Teams (funktioniert noch nicht) (asynchronously)
     * 
     * @param limit How many items to return at one time (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An paged array of Racing Teams </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call racingteamGetAsync(Integer limit, final ApiCallback<List<RacingTeamDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = racingteamGetValidateBeforeCall(limit, _callback);
        Type localVarReturnType = new TypeToken<List<RacingTeamDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
