/* tslint:disable */
/* eslint-disable */
/**
 * Formel 1 API
 * A small sample API to grasp the basics of the OpenAPI Specification
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DriverDto,
    DriverDtoFromJSON,
    DriverDtoToJSON,
    PonyDto,
    PonyDtoFromJSON,
    PonyDtoToJSON,
    RacingTeamDto,
    RacingTeamDtoFromJSON,
    RacingTeamDtoToJSON,
} from '../models';

export interface AddPonyRequest {
    ponyDto: PonyDto;
}

export interface DriverGetRequest {
    limit?: number;
}

export interface GetPoniesRequest {
    limit?: number;
}

export interface RacingteamGetRequest {
    limit?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * introduce a new pony to the flock
     */
    async addPonyRaw(requestParameters: AddPonyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PonyDto>> {
        if (requestParameters.ponyDto === null || requestParameters.ponyDto === undefined) {
            throw new runtime.RequiredError('ponyDto','Required parameter requestParameters.ponyDto was null or undefined when calling addPony.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ponies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PonyDtoToJSON(requestParameters.ponyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PonyDtoFromJSON(jsonValue));
    }

    /**
     * introduce a new pony to the flock
     */
    async addPony(requestParameters: AddPonyRequest, initOverrides?: RequestInit): Promise<PonyDto> {
        const response = await this.addPonyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all drivers (funktioniert noch nicht)
     */
    async driverGetRaw(requestParameters: DriverGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<DriverDto>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/driver`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DriverDtoFromJSON));
    }

    /**
     * List all drivers (funktioniert noch nicht)
     */
    async driverGet(requestParameters: DriverGetRequest = {}, initOverrides?: RequestInit): Promise<Array<DriverDto>> {
        const response = await this.driverGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all ponies
     */
    async getPoniesRaw(requestParameters: GetPoniesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PonyDto>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ponies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PonyDtoFromJSON));
    }

    /**
     * List all ponies
     */
    async getPonies(requestParameters: GetPoniesRequest = {}, initOverrides?: RequestInit): Promise<Array<PonyDto>> {
        const response = await this.getPoniesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all Racing Teams (funktioniert noch nicht)
     */
    async racingteamGetRaw(requestParameters: RacingteamGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<RacingTeamDto>>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/racingteam`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RacingTeamDtoFromJSON));
    }

    /**
     * List all Racing Teams (funktioniert noch nicht)
     */
    async racingteamGet(requestParameters: RacingteamGetRequest = {}, initOverrides?: RequestInit): Promise<Array<RacingTeamDto>> {
        const response = await this.racingteamGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
