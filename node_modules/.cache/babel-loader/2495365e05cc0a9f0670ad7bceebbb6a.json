{"ast":null,"code":"/* tslint:disable */\n\n/* eslint-disable */\n\n/**\n * Ponyhof API\n * A small sample API to grasp the basics of the OpenAPI Specification\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nexport const BASE_PATH = \"http://localhost:8080/api\".replace(/\\/+$/, \"\");\n\nconst isBlob = value => typeof Blob !== 'undefined' && value instanceof Blob;\n/**\n * This is the base class for all generated API classes.\n */\n\n\nexport class BaseAPI {\n  constructor() {\n    let configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Configuration();\n    this.configuration = configuration;\n    this.middleware = void 0;\n\n    this.fetchApi = async (url, init) => {\n      let fetchParams = {\n        url,\n        init\n      };\n\n      for (const middleware of this.middleware) {\n        if (middleware.pre) {\n          fetchParams = (await middleware.pre({\n            fetch: this.fetchApi,\n            ...fetchParams\n          })) || fetchParams;\n        }\n      }\n\n      let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);\n\n      for (const middleware of this.middleware) {\n        if (middleware.post) {\n          response = (await middleware.post({\n            fetch: this.fetchApi,\n            url: fetchParams.url,\n            init: fetchParams.init,\n            response: response.clone()\n          })) || response;\n        }\n      }\n\n      return response;\n    };\n\n    this.middleware = configuration.middleware;\n  }\n\n  withMiddleware() {\n    const next = this.clone();\n    next.middleware = next.middleware.concat(...arguments);\n    return next;\n  }\n\n  withPreMiddleware() {\n    for (var _len = arguments.length, preMiddlewares = new Array(_len), _key = 0; _key < _len; _key++) {\n      preMiddlewares[_key] = arguments[_key];\n    }\n\n    const middlewares = preMiddlewares.map(pre => ({\n      pre\n    }));\n    return this.withMiddleware(...middlewares);\n  }\n\n  withPostMiddleware() {\n    for (var _len2 = arguments.length, postMiddlewares = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      postMiddlewares[_key2] = arguments[_key2];\n    }\n\n    const middlewares = postMiddlewares.map(post => ({\n      post\n    }));\n    return this.withMiddleware(...middlewares);\n  }\n\n  async request(context, initOverrides) {\n    const {\n      url,\n      init\n    } = this.createFetchParams(context, initOverrides);\n    const response = await this.fetchApi(url, init);\n\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    throw response;\n  }\n\n  createFetchParams(context, initOverrides) {\n    let url = this.configuration.basePath + context.path;\n\n    if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n      // only add the querystring to the URL if there are query parameters.\n      // this is done to avoid urls ending with a \"?\" character which buggy webservers\n      // do not handle correctly sometimes.\n      url += '?' + this.configuration.queryParamsStringify(context.query);\n    }\n\n    const body = typeof FormData !== \"undefined\" && context.body instanceof FormData || context.body instanceof URLSearchParams || isBlob(context.body) ? context.body : JSON.stringify(context.body);\n    const headers = Object.assign({}, this.configuration.headers, context.headers);\n    const init = {\n      method: context.method,\n      headers: headers,\n      body,\n      credentials: this.configuration.credentials,\n      ...initOverrides\n    };\n    return {\n      url,\n      init\n    };\n  }\n\n  /**\n   * Create a shallow clone of `this` by constructing a new instance\n   * and then shallow cloning data members.\n   */\n  clone() {\n    const constructor = this.constructor;\n    const next = new constructor(this.configuration);\n    next.middleware = this.middleware.slice();\n    return next;\n  }\n\n}\n;\nexport class RequiredError extends Error {\n  constructor(field, msg) {\n    super(msg);\n    this.field = field;\n    this.name = \"RequiredError\";\n  }\n\n}\nexport const COLLECTION_FORMATS = {\n  csv: \",\",\n  ssv: \" \",\n  tsv: \"\\t\",\n  pipes: \"|\"\n};\nexport class Configuration {\n  constructor() {\n    let configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.configuration = configuration;\n  }\n\n  get basePath() {\n    return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n  }\n\n  get fetchApi() {\n    return this.configuration.fetchApi;\n  }\n\n  get middleware() {\n    return this.configuration.middleware || [];\n  }\n\n  get queryParamsStringify() {\n    return this.configuration.queryParamsStringify || querystring;\n  }\n\n  get username() {\n    return this.configuration.username;\n  }\n\n  get password() {\n    return this.configuration.password;\n  }\n\n  get apiKey() {\n    const apiKey = this.configuration.apiKey;\n\n    if (apiKey) {\n      return typeof apiKey === 'function' ? apiKey : () => apiKey;\n    }\n\n    return undefined;\n  }\n\n  get accessToken() {\n    const accessToken = this.configuration.accessToken;\n\n    if (accessToken) {\n      return typeof accessToken === 'function' ? accessToken : async () => accessToken;\n    }\n\n    return undefined;\n  }\n\n  get headers() {\n    return this.configuration.headers;\n  }\n\n  get credentials() {\n    return this.configuration.credentials;\n  }\n\n}\nexport function exists(json, key) {\n  const value = json[key];\n  return value !== null && value !== undefined;\n}\nexport function querystring(params) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  return Object.keys(params).map(key => {\n    const fullKey = prefix + (prefix.length ? `[${key}]` : key);\n    const value = params[key];\n\n    if (value instanceof Array) {\n      const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);\n      return `${encodeURIComponent(fullKey)}=${multiValue}`;\n    }\n\n    if (value instanceof Date) {\n      return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n    }\n\n    if (value instanceof Object) {\n      return querystring(value, fullKey);\n    }\n\n    return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n  }).filter(part => part.length > 0).join('&');\n}\nexport function mapValues(data, fn) {\n  return Object.keys(data).reduce((acc, key) => ({ ...acc,\n    [key]: fn(data[key])\n  }), {});\n}\nexport function canConsumeForm(consumes) {\n  for (const consume of consumes) {\n    if ('multipart/form-data' === consume.contentType) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class JSONApiResponse {\n  constructor(raw) {\n    let transformer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : jsonValue => jsonValue;\n    this.raw = raw;\n    this.transformer = transformer;\n  }\n\n  async value() {\n    return this.transformer(await this.raw.json());\n  }\n\n}\nexport class VoidApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return undefined;\n  }\n\n}\nexport class BlobApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return await this.raw.blob();\n  }\n\n}\nexport class TextApiResponse {\n  constructor(raw) {\n    this.raw = raw;\n  }\n\n  async value() {\n    return await this.raw.text();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Noel/OneDrive/01 BBW/M326/bbw-226-openapiproject-master/src/generated/openapi/runtime.ts"],"names":["BASE_PATH","replace","isBlob","value","Blob","BaseAPI","constructor","configuration","Configuration","middleware","fetchApi","url","init","fetchParams","pre","fetch","response","post","clone","withMiddleware","next","concat","withPreMiddleware","preMiddlewares","middlewares","map","withPostMiddleware","postMiddlewares","request","context","initOverrides","createFetchParams","status","basePath","path","query","undefined","Object","keys","length","queryParamsStringify","body","FormData","URLSearchParams","JSON","stringify","headers","assign","method","credentials","slice","RequiredError","Error","field","msg","name","COLLECTION_FORMATS","csv","ssv","tsv","pipes","querystring","username","password","apiKey","accessToken","exists","json","key","params","prefix","fullKey","Array","multiValue","singleValue","encodeURIComponent","String","join","Date","toISOString","filter","part","mapValues","data","fn","reduce","acc","canConsumeForm","consumes","consume","contentType","JSONApiResponse","raw","transformer","jsonValue","VoidApiResponse","BlobApiResponse","blob","TextApiResponse","text"],"mappings":"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","sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Ponyhof API\n * A small sample API to grasp the basics of the OpenAPI Specification\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport const BASE_PATH = \"http://localhost:8080/api\".replace(/\\/+$/, \"\");\n\nconst isBlob = (value: any) => typeof Blob !== 'undefined' && value instanceof Blob;\n\n/**\n * This is the base class for all generated API classes.\n */\nexport class BaseAPI {\n\n    private middleware: Middleware[];\n\n    constructor(protected configuration = new Configuration()) {\n        this.middleware = configuration.middleware;\n    }\n\n    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {\n        const next = this.clone<T>();\n        next.middleware = next.middleware.concat(...middlewares);\n        return next;\n    }\n\n    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {\n        const middlewares = preMiddlewares.map((pre) => ({ pre }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {\n        const middlewares = postMiddlewares.map((post) => ({ post }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    protected async request(context: RequestOpts, initOverrides?: RequestInit): Promise<Response> {\n        const { url, init } = this.createFetchParams(context, initOverrides);\n        const response = await this.fetchApi(url, init);\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        }\n        throw response;\n    }\n\n    private createFetchParams(context: RequestOpts, initOverrides?: RequestInit) {\n        let url = this.configuration.basePath + context.path;\n        if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n            // only add the querystring to the URL if there are query parameters.\n            // this is done to avoid urls ending with a \"?\" character which buggy webservers\n            // do not handle correctly sometimes.\n            url += '?' + this.configuration.queryParamsStringify(context.query);\n        }\n        const body = ((typeof FormData !== \"undefined\" && context.body instanceof FormData) || context.body instanceof URLSearchParams || isBlob(context.body))\n        ? context.body\n        : JSON.stringify(context.body);\n\n        const headers = Object.assign({}, this.configuration.headers, context.headers);\n        const init = {\n            method: context.method,\n            headers: headers,\n            body,\n            credentials: this.configuration.credentials,\n            ...initOverrides\n        };\n        return { url, init };\n    }\n\n    private fetchApi = async (url: string, init: RequestInit) => {\n        let fetchParams = { url, init };\n        for (const middleware of this.middleware) {\n            if (middleware.pre) {\n                fetchParams = await middleware.pre({\n                    fetch: this.fetchApi,\n                    ...fetchParams,\n                }) || fetchParams;\n            }\n        }\n        let response = await (this.configuration.fetchApi || fetch)(fetchParams.url, fetchParams.init);\n        for (const middleware of this.middleware) {\n            if (middleware.post) {\n                response = await middleware.post({\n                    fetch: this.fetchApi,\n                    url: fetchParams.url,\n                    init: fetchParams.init,\n                    response: response.clone(),\n                }) || response;\n            }\n        }\n        return response;\n    }\n\n    /**\n     * Create a shallow clone of `this` by constructing a new instance\n     * and then shallow cloning data members.\n     */\n    private clone<T extends BaseAPI>(this: T): T {\n        const constructor = this.constructor as any;\n        const next = new constructor(this.configuration);\n        next.middleware = this.middleware.slice();\n        return next;\n    }\n};\n\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\nexport type FetchAPI = WindowOrWorkerGlobalScope['fetch'];\n\nexport interface ConfigurationParameters {\n    basePath?: string; // override base path\n    fetchApi?: FetchAPI; // override for fetch implementation\n    middleware?: Middleware[]; // middleware to apply before/after fetch requests\n    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings\n    username?: string; // parameter for basic security\n    password?: string; // parameter for basic security\n    apiKey?: string | ((name: string) => string); // parameter for apiKey security\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string | Promise<string>); // parameter for oauth2 security\n    headers?: HTTPHeaders; //header params we want to use on every request\n    credentials?: RequestCredentials; //value for the credentials param we want to use on each request\n}\n\nexport class Configuration {\n    constructor(private configuration: ConfigurationParameters = {}) {}\n\n    get basePath(): string {\n        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n    }\n\n    get fetchApi(): FetchAPI | undefined {\n        return this.configuration.fetchApi;\n    }\n\n    get middleware(): Middleware[] {\n        return this.configuration.middleware || [];\n    }\n\n    get queryParamsStringify(): (params: HTTPQuery) => string {\n        return this.configuration.queryParamsStringify || querystring;\n    }\n\n    get username(): string | undefined {\n        return this.configuration.username;\n    }\n\n    get password(): string | undefined {\n        return this.configuration.password;\n    }\n\n    get apiKey(): ((name: string) => string) | undefined {\n        const apiKey = this.configuration.apiKey;\n        if (apiKey) {\n            return typeof apiKey === 'function' ? apiKey : () => apiKey;\n        }\n        return undefined;\n    }\n\n    get accessToken(): ((name?: string, scopes?: string[]) => string | Promise<string>) | undefined {\n        const accessToken = this.configuration.accessToken;\n        if (accessToken) {\n            return typeof accessToken === 'function' ? accessToken : async () => accessToken;\n        }\n        return undefined;\n    }\n\n    get headers(): HTTPHeaders | undefined {\n        return this.configuration.headers;\n    }\n\n    get credentials(): RequestCredentials | undefined {\n        return this.configuration.credentials;\n    }\n}\n\nexport type Json = any;\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\nexport type HTTPHeaders = { [key: string]: string };\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | HTTPQuery };\nexport type HTTPBody = Json | FormData | URLSearchParams;\nexport type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';\n\nexport interface FetchParams {\n    url: string;\n    init: RequestInit;\n}\n\nexport interface RequestOpts {\n    path: string;\n    method: HTTPMethod;\n    headers: HTTPHeaders;\n    query?: HTTPQuery;\n    body?: HTTPBody;\n}\n\nexport function exists(json: any, key: string) {\n    const value = json[key];\n    return value !== null && value !== undefined;\n}\n\nexport function querystring(params: HTTPQuery, prefix: string = ''): string {\n    return Object.keys(params)\n        .map((key) => {\n            const fullKey = prefix + (prefix.length ? `[${key}]` : key);\n            const value = params[key];\n            if (value instanceof Array) {\n                const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\n                    .join(`&${encodeURIComponent(fullKey)}=`);\n                return `${encodeURIComponent(fullKey)}=${multiValue}`;\n            }\n            if (value instanceof Date) {\n                return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n            }\n            if (value instanceof Object) {\n                return querystring(value as HTTPQuery, fullKey);\n            }\n            return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n        })\n        .filter(part => part.length > 0)\n        .join('&');\n}\n\nexport function mapValues(data: any, fn: (item: any) => any) {\n  return Object.keys(data).reduce(\n    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),\n    {}\n  );\n}\n\nexport function canConsumeForm(consumes: Consume[]): boolean {\n    for (const consume of consumes) {\n        if ('multipart/form-data' === consume.contentType) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport interface Consume {\n    contentType: string\n}\n\nexport interface RequestContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n}\n\nexport interface ResponseContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    response: Response;\n}\n\nexport interface Middleware {\n    pre?(context: RequestContext): Promise<FetchParams | void>;\n    post?(context: ResponseContext): Promise<Response | void>;\n}\n\nexport interface ApiResponse<T> {\n    raw: Response;\n    value(): Promise<T>;\n}\n\nexport interface ResponseTransformer<T> {\n    (json: any): T;\n}\n\nexport class JSONApiResponse<T> {\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}\n\n    async value(): Promise<T> {\n        return this.transformer(await this.raw.json());\n    }\n}\n\nexport class VoidApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<void> {\n        return undefined;\n    }\n}\n\nexport class BlobApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<Blob> {\n        return await this.raw.blob();\n    };\n}\n\nexport class TextApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<string> {\n        return await this.raw.text();\n    };\n}\n"]},"metadata":{},"sourceType":"module"}